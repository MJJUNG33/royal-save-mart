{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst cartItems = createSlice({\n  name: \"cartItems\",\n  initialState: [],\n  reducers: {\n    incrementCounter(state, action) {\n      const productIndex = state.findIndex(product => product.id === action.payload);\n      if (productIndex !== -1) {\n        state[productIndex] = {\n          ...state[productIndex],\n          count: state[productIndex].count + 1\n        };\n        localStorage.setItem(\"addedToCart\", JSON.stringify(state));\n      }\n    },\n    decrementCounter(state, action) {\n      const productIndex = state.findIndex(product => product.id === action.payload);\n      if (productIndex !== -1) {\n        const updatedCount = state[productIndex].count - 1;\n        if (updatedCount === 0) {\n          state.splice(productIndex, 1);\n        } else {\n          state[productIndex] = {\n            ...state[productIndex],\n            count: updatedCount\n          };\n        }\n        localStorage.setItem(\"addedToCart\", JSON.stringify(state));\n      }\n    },\n    addToCart(state, action) {\n      const existingProduct = state.find(product => product.id === action.payload.id);\n      if (existingProduct) {\n        existingProduct.count += 1;\n      } else {\n        state.push({\n          ...action.payload,\n          count: 1\n        });\n      }\n    }\n  },\n  removeFromCart(state, action) {\n    const productId = action.payload;\n    const updatedCart = state.filter(product => product.id !== productId);\n    localStorage.setItem(\"addedToCart\", JSON.stringify(updatedCart));\n    return updatedCart;\n  }\n});\nexport const {\n  incrementCounter,\n  decrementCounter,\n  addToCart,\n  removeFromCart\n} = cartItems.actions;\nexport default configureStore({\n  reducer: {\n    cartItems: cartItems.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","cartItems","name","initialState","reducers","incrementCounter","state","action","productIndex","findIndex","product","id","payload","count","localStorage","setItem","JSON","stringify","decrementCounter","updatedCount","splice","addToCart","existingProduct","find","push","removeFromCart","productId","updatedCart","filter","actions","reducer"],"sources":["/Users/minjijung/Desktop/royasavemart/royal-save-mart/src/store.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\nconst cartItems = createSlice({\n  name: \"cartItems\",\n  initialState: [],\n  reducers: {\n    incrementCounter(state, action) {\n      const productIndex = state.findIndex(\n        (product) => product.id === action.payload\n      );\n\n      if (productIndex !== -1) {\n        state[productIndex] = {\n          ...state[productIndex],\n          count: state[productIndex].count + 1,\n        };\n        localStorage.setItem(\"addedToCart\", JSON.stringify(state));\n      }\n    },\n\n    decrementCounter(state, action) {\n      const productIndex = state.findIndex(\n        (product) => product.id === action.payload\n      );\n\n      if (productIndex !== -1) {\n        const updatedCount = state[productIndex].count - 1;\n\n        if (updatedCount === 0) {\n          state.splice(productIndex, 1);\n        } else {\n          state[productIndex] = {\n            ...state[productIndex],\n            count: updatedCount,\n          };\n        }\n        localStorage.setItem(\"addedToCart\", JSON.stringify(state));\n      }\n    },\n\n    addToCart(state, action) {\n      const existingProduct = state.find(\n        (product) => product.id === action.payload.id\n      );\n\n      if (existingProduct) {\n        existingProduct.count += 1;\n      } else {\n        state.push({ ...action.payload, count: 1 });\n      }\n    },\n  },\n\n  removeFromCart(state, action) {\n    const productId = action.payload;\n    const updatedCart = state.filter((product) => product.id !== productId);\n    localStorage.setItem(\"addedToCart\", JSON.stringify(updatedCart));\n    return updatedCart;\n  },\n});\n\nexport const { incrementCounter, decrementCounter, addToCart, removeFromCart } =\n  cartItems.actions;\n\nexport default configureStore({\n  reducer: {\n    cartItems: cartItems.reducer,\n  },\n});\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACRC,gBAAgBA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC9B,MAAMC,YAAY,GAAGF,KAAK,CAACG,SAAS,CACjCC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKJ,MAAM,CAACK,OACrC,CAAC;MAED,IAAIJ,YAAY,KAAK,CAAC,CAAC,EAAE;QACvBF,KAAK,CAACE,YAAY,CAAC,GAAG;UACpB,GAAGF,KAAK,CAACE,YAAY,CAAC;UACtBK,KAAK,EAAEP,KAAK,CAACE,YAAY,CAAC,CAACK,KAAK,GAAG;QACrC,CAAC;QACDC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACX,KAAK,CAAC,CAAC;MAC5D;IACF,CAAC;IAEDY,gBAAgBA,CAACZ,KAAK,EAAEC,MAAM,EAAE;MAC9B,MAAMC,YAAY,GAAGF,KAAK,CAACG,SAAS,CACjCC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKJ,MAAM,CAACK,OACrC,CAAC;MAED,IAAIJ,YAAY,KAAK,CAAC,CAAC,EAAE;QACvB,MAAMW,YAAY,GAAGb,KAAK,CAACE,YAAY,CAAC,CAACK,KAAK,GAAG,CAAC;QAElD,IAAIM,YAAY,KAAK,CAAC,EAAE;UACtBb,KAAK,CAACc,MAAM,CAACZ,YAAY,EAAE,CAAC,CAAC;QAC/B,CAAC,MAAM;UACLF,KAAK,CAACE,YAAY,CAAC,GAAG;YACpB,GAAGF,KAAK,CAACE,YAAY,CAAC;YACtBK,KAAK,EAAEM;UACT,CAAC;QACH;QACAL,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACX,KAAK,CAAC,CAAC;MAC5D;IACF,CAAC;IAEDe,SAASA,CAACf,KAAK,EAAEC,MAAM,EAAE;MACvB,MAAMe,eAAe,GAAGhB,KAAK,CAACiB,IAAI,CAC/Bb,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAC7C,CAAC;MAED,IAAIW,eAAe,EAAE;QACnBA,eAAe,CAACT,KAAK,IAAI,CAAC;MAC5B,CAAC,MAAM;QACLP,KAAK,CAACkB,IAAI,CAAC;UAAE,GAAGjB,MAAM,CAACK,OAAO;UAAEC,KAAK,EAAE;QAAE,CAAC,CAAC;MAC7C;IACF;EACF,CAAC;EAEDY,cAAcA,CAACnB,KAAK,EAAEC,MAAM,EAAE;IAC5B,MAAMmB,SAAS,GAAGnB,MAAM,CAACK,OAAO;IAChC,MAAMe,WAAW,GAAGrB,KAAK,CAACsB,MAAM,CAAElB,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKe,SAAS,CAAC;IACvEZ,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACU,WAAW,CAAC,CAAC;IAChE,OAAOA,WAAW;EACpB;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEtB,gBAAgB;EAAEa,gBAAgB;EAAEG,SAAS;EAAEI;AAAe,CAAC,GAC5ExB,SAAS,CAAC4B,OAAO;AAEnB,eAAe9B,cAAc,CAAC;EAC5B+B,OAAO,EAAE;IACP7B,SAAS,EAAEA,SAAS,CAAC6B;EACvB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}