{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst cartItems = createSlice({\n  name: \"cartItems\",\n  initialState: [],\n  reducers: {\n    incrementCounter(state, action) {\n      const productIndex = state.findIndex(product => product.id === action.payload);\n      if (productIndex !== -1) {\n        return state.map((product, index) => index === productIndex ? {\n          ...product,\n          count: product.count + 1\n        } : product);\n      }\n      return state;\n    },\n    decrementCounter(state, action) {\n      const productIndex = state.findIndex(product => product.id === action.payload);\n      if (productIndex !== -1) {\n        const updatedCount = state[productIndex].count - 1;\n        if (updatedCount === 0) {\n          return state.filter((product, index) => index !== productIndex);\n        } else {\n          return state.map((product, index) => index === productIndex ? {\n            ...product,\n            count: updatedCount\n          } : product);\n        }\n      }\n      return state;\n    },\n    addToCart(state, action) {\n      // const product = state.find((product) => product.id === action.payload.id);\n      // if (product) {\n      //   product.count++;\n      // } else {\n      //   state.push({ ...action.payload, count: 1 });\n      // }\n      // localStorage.setItem(\"addedToCart\", JSON.stringify(state));\n      const product = state.find(product => product.id === action.payload.id);\n      if (product) {\n        // If the product is already in the cart, increment the count\n        const updatedState = state.map(p => p.id === action.payload.id ? {\n          ...p,\n          count: p.count + 1\n        } : p);\n        localStorage.setItem(\"addedToCart\", JSON.stringify(updatedState));\n        return updatedState;\n      } else {\n        // If the product is not in the cart, add it with count 1\n        const updatedState = [...state, {\n          ...action.payload,\n          count: 1\n        }];\n        localStorage.setItem(\"addedToCart\", JSON.stringify(updatedState));\n        return updatedState;\n      }\n    },\n    removeFromCart(state, action) {\n      const productId = action.payload;\n      const updatedCart = state.filter(product => product.id !== productId);\n      localStorage.setItem(\"addedToCart\", JSON.stringify(updatedCart));\n      return updatedCart;\n    }\n  }\n});\nexport const {\n  incrementCounter,\n  decrementCounter,\n  addToCart,\n  updateCartItems,\n  removeFromCart\n} = cartItems.actions;\nexport default configureStore({\n  reducer: {\n    cartItems: cartItems.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","cartItems","name","initialState","reducers","incrementCounter","state","action","productIndex","findIndex","product","id","payload","map","index","count","decrementCounter","updatedCount","filter","addToCart","find","updatedState","p","localStorage","setItem","JSON","stringify","removeFromCart","productId","updatedCart","updateCartItems","actions","reducer"],"sources":["/Users/minjijung/Desktop/royasavemart/royal-save-mart/src/store.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\nconst cartItems = createSlice({\n  name: \"cartItems\",\n  initialState: [],\n  reducers: {\n    incrementCounter(state, action) {\n      const productIndex = state.findIndex(\n        (product) => product.id === action.payload\n      );\n      if (productIndex !== -1) {\n        return state.map((product, index) =>\n          index === productIndex\n            ? { ...product, count: product.count + 1 }\n            : product\n        );\n      }\n      return state;\n    },\n\n    decrementCounter(state, action) {\n      const productIndex = state.findIndex(\n        (product) => product.id === action.payload\n      );\n      if (productIndex !== -1) {\n        const updatedCount = state[productIndex].count - 1;\n\n        if (updatedCount === 0) {\n          return state.filter((product, index) => index !== productIndex);\n        } else {\n          return state.map((product, index) =>\n            index === productIndex\n              ? { ...product, count: updatedCount }\n              : product\n          );\n        }\n      }\n      return state;\n    },\n\n    addToCart(state, action) {\n      // const product = state.find((product) => product.id === action.payload.id);\n      // if (product) {\n      //   product.count++;\n      // } else {\n      //   state.push({ ...action.payload, count: 1 });\n      // }\n      // localStorage.setItem(\"addedToCart\", JSON.stringify(state));\n      const product = state.find((product) => product.id === action.payload.id);\n      if (product) {\n        // If the product is already in the cart, increment the count\n        const updatedState = state.map((p) =>\n          p.id === action.payload.id ? { ...p, count: p.count + 1 } : p\n        );\n        localStorage.setItem(\"addedToCart\", JSON.stringify(updatedState));\n        return updatedState;\n      } else {\n        // If the product is not in the cart, add it with count 1\n        const updatedState = [...state, { ...action.payload, count: 1 }];\n        localStorage.setItem(\"addedToCart\", JSON.stringify(updatedState));\n        return updatedState;\n      }\n    },\n\n    removeFromCart(state, action) {\n      const productId = action.payload;\n      const updatedCart = state.filter((product) => product.id !== productId);\n      localStorage.setItem(\"addedToCart\", JSON.stringify(updatedCart));\n      return updatedCart;\n    },\n  },\n});\n\nexport const {\n  incrementCounter,\n  decrementCounter,\n  addToCart,\n  updateCartItems,\n  removeFromCart,\n} = cartItems.actions;\n\nexport default configureStore({\n  reducer: {\n    cartItems: cartItems.reducer,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}